/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import {
  useBankapiContext,
  BankapiContext,
  queryKeyFn,
} from "./bankapiContext";
import { deepMerge } from "./bankapiUtils";
import type * as Fetcher from "./bankapiFetcher";
import { bankapiFetch } from "./bankapiFetcher";

export type CreateaccountsError = Fetcher.ErrorWrapper<undefined>;

export type CreateaccountsRequestBody = {
  accountName?: string;
  accountType?: string;
  accountPin?: string;
  accountBankName?: string;
  accountBankSwiftCode?: string;
  accountBankRoutingTransitNumber?: string;
  accountNumber?: string;
  accountBalance?: string;
  accountStatus?: string;
};

export type CreateaccountsVariables = {
  body?: CreateaccountsRequestBody;
} & BankapiContext["fetcherOptions"];

/**
 * Adds a new account to the system.
 */
export const fetchCreateaccounts = (
  variables: CreateaccountsVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<
    undefined,
    CreateaccountsError,
    CreateaccountsRequestBody,
    {},
    {},
    {}
  >({ url: "/accounts/accounts", includeCredentials:true, method: "post", ...variables, signal });

/**
 * Adds a new account to the system.
 */
export const useCreateaccounts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreateaccountsError,
      CreateaccountsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useBankapiContext();
  return reactQuery.useMutation<
    undefined,
    CreateaccountsError,
    CreateaccountsVariables
  >({
    mutationFn: (variables: CreateaccountsVariables) =>
      fetchCreateaccounts(deepMerge(fetcherOptions, variables)),
    ...options,
  });
};

export type GetaccountsError = Fetcher.ErrorWrapper<undefined>;

export type GetaccountsVariables = BankapiContext["fetcherOptions"];

/**
 * Returns a list of accounts
 */
export const fetchGetaccounts = (
  variables: GetaccountsVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<undefined, GetaccountsError, undefined, {}, {}, {}>({
    url: "/accounts/accounts",
    method: "get",
    includeCredentials:true,
    ...variables,
    signal,
  });

/**
 * Returns a list of accounts
 */
export const getaccountsQuery = (
  variables: GetaccountsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/accounts/accounts",
    operationId: "getaccounts",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGetaccounts(variables, signal),
});

/**
 * Returns a list of accounts
 */
export const useSuspenseGetaccounts = <TData = undefined,>(
  variables: GetaccountsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetaccountsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useSuspenseQuery<undefined, GetaccountsError, TData>({
    ...getaccountsQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns a list of accounts
 */
export const useGetaccounts = <TData = undefined,>(
  variables: GetaccountsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetaccountsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useQuery<undefined, GetaccountsError, TData>({
    ...getaccountsQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export type GetSingleAccountError = Fetcher.ErrorWrapper<undefined>;

export type GetSingleAccountVariables = BankapiContext["fetcherOptions"];

/**
 * Returns a specific account
 */
export const fetchGetSingleAccount = (
  variables: GetSingleAccountVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<undefined, GetSingleAccountError, undefined, {}, {}, {}>({
    url: "/accounts/account-info",
    includeCredentials:true,
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns a specific account
 */
export const getSingleAccountQuery = (
  variables: GetSingleAccountVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/accounts/account-info",
    operationId: "getSingleAccount",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGetSingleAccount(variables, signal),
});

/**
 * Returns a specific account
 */
export const useSuspenseGetSingleAccount = <TData = undefined,>(
  variables: GetSingleAccountVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetSingleAccountError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useSuspenseQuery<undefined, GetSingleAccountError, TData>({
    ...getSingleAccountQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns a specific account
 */
export const useGetSingleAccount = <TData = undefined,>(
  variables: GetSingleAccountVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetSingleAccountError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useQuery<undefined, GetSingleAccountError, TData>({
    ...getSingleAccountQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export type UpdateAccountError = Fetcher.ErrorWrapper<undefined>;

export type UpdateAccountRequestBody = {
  /**
   * The ID of the user to update
   */
  userId?: string;
  /**
   * Fields to update
   */
  updateFields?: {
    [key: string]: any;
  };
};

export type UpdateAccountVariables = {
  body?: UpdateAccountRequestBody;
} & BankapiContext["fetcherOptions"];

/**
 * Updates account data based on provided fields
 */
export const fetchUpdateAccount = (
  variables: UpdateAccountVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<
    undefined,
    UpdateAccountError,
    UpdateAccountRequestBody,
    {},
    {},
    {}
  >({ url: "/accounts/account-info",  includeCredentials:true,method: "patch", ...variables, signal });

/**
 * Updates account data based on provided fields
 */
export const useUpdateAccount = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateAccountError,
      UpdateAccountVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useBankapiContext();
  return reactQuery.useMutation<
    undefined,
    UpdateAccountError,
    UpdateAccountVariables
  >({
    mutationFn: (variables: UpdateAccountVariables) =>
      fetchUpdateAccount(deepMerge(fetcherOptions, variables)),
    ...options,
  });
};

export type AddBankDetailError = Fetcher.ErrorWrapper<undefined>;

export type AddBankDetailRequestBody = {
  typeOfBank?: string;
  bankCountry?: string;
  bankName?: string;
  accountName?: string;
  accountNumber?: string;
  swiftCode?: string;
};

export type AddBankDetailVariables = {
  body?: AddBankDetailRequestBody;
} & BankapiContext["fetcherOptions"];

/**
 * Adds a new bank detail to the user's profile.
 */
export const fetchAddBankDetail = (
  variables: AddBankDetailVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<
    undefined,
    AddBankDetailError,
    AddBankDetailRequestBody,
    {},
    {},
    {}
  >({ url: "/bank/add-bank-detail",  includeCredentials:true,method: "post", ...variables, signal });

/**
 * Adds a new bank detail to the user's profile.
 */
export const useAddBankDetail = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AddBankDetailError,
      AddBankDetailVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useBankapiContext();
  return reactQuery.useMutation<
    undefined,
    AddBankDetailError,
    AddBankDetailVariables
  >({
    mutationFn: (variables: AddBankDetailVariables) =>
      fetchAddBankDetail(deepMerge(fetcherOptions, variables)),
    ...options,
  });
};

export type GetBankDetailsError = Fetcher.ErrorWrapper<undefined>;

export type GetBankDetailsVariables = BankapiContext["fetcherOptions"];

/**
 * Retrieve all bank details associated with a user.
 */
export const fetchGetBankDetails = (
  variables: GetBankDetailsVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<undefined, GetBankDetailsError, undefined, {}, {}, {}>({
    url: "/bank/all-bank-details",
    method: "get",
    includeCredentials:true,
    ...variables,
    signal,
  });

/**
 * Retrieve all bank details associated with a user.
 */
export const getBankDetailsQuery = (
  variables: GetBankDetailsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/bank/all-bank-details",
    operationId: "getBankDetails",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGetBankDetails(variables, signal),
});

/**
 * Retrieve all bank details associated with a user.
 */
export const useSuspenseGetBankDetails = <TData = undefined,>(
  variables: GetBankDetailsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetBankDetailsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useSuspenseQuery<undefined, GetBankDetailsError, TData>({
    ...getBankDetailsQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

/**
 * Retrieve all bank details associated with a user.
 */
export const useGetBankDetails = <TData = undefined,>(
  variables: GetBankDetailsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetBankDetailsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useQuery<undefined, GetBankDetailsError, TData>({
    ...getBankDetailsQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export type DeleteBankDetailError = Fetcher.ErrorWrapper<undefined>;

export type DeleteBankDetailRequestBody = {
  detailId?: string;
};

export type DeleteBankDetailVariables = {
  body?: DeleteBankDetailRequestBody;
} & BankapiContext["fetcherOptions"];

/**
 * Deletes a specific bank detail for a user.
 */
export const fetchDeleteBankDetail = (
  variables: DeleteBankDetailVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<
    undefined,
    DeleteBankDetailError,
    DeleteBankDetailRequestBody,
    {},
    {},
    {}
  >({
    url: "/bank/delete-bank-detail",
    method: "delete",
    includeCredentials:true,
    ...variables,
    signal,
  });

/**
 * Deletes a specific bank detail for a user.
 */
export const useDeleteBankDetail = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteBankDetailError,
      DeleteBankDetailVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useBankapiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteBankDetailError,
    DeleteBankDetailVariables
  >({
    mutationFn: (variables: DeleteBankDetailVariables) =>
      fetchDeleteBankDetail(deepMerge(fetcherOptions, variables)),
    ...options,
  });
};

export type UpdateBankDetailError = Fetcher.ErrorWrapper<undefined>;

export type UpdateBankDetailRequestBody = {
  detailId?: string;
  updateData: Record<string, any>;
};

export type UpdateBankDetailVariables = {
  body: UpdateBankDetailRequestBody;
} & BankapiContext["fetcherOptions"];

/**
 * Updates a specific bank detail for a user.
 */
export const fetchUpdateBankDetail = (
  variables: UpdateBankDetailVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<
    undefined,
    UpdateBankDetailError,
    UpdateBankDetailRequestBody,
    {},
    {},
    {}
  >({ url: "/bank/update-bank-detail", includeCredentials:true, method: "patch", ...variables, signal });

/**
 * Updates a specific bank detail for a user.
 */
export const useUpdateBankDetail = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateBankDetailError,
      UpdateBankDetailVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useBankapiContext();
  return reactQuery.useMutation<
    undefined,
    UpdateBankDetailError,
    UpdateBankDetailVariables
  >({
    mutationFn: (variables: UpdateBankDetailVariables) =>
      fetchUpdateBankDetail({
        ...deepMerge(fetcherOptions, variables),
        body: variables.body, // Ensure body is explicitly included
      }),
    ...options,
  });
};

export type AddCardDetailError = Fetcher.ErrorWrapper<undefined>;

export type AddCardDetailRequestBody = {
  card?: string;
  cardType?: string;
  cardNumber?: string;
  expiryDate?: string;
  cvv?: string;
  cardHolderName?: string;
};

export type AddCardDetailVariables = {
  body?: AddCardDetailRequestBody;
} & BankapiContext["fetcherOptions"];

/**
 * Adds a new card detail to the user's profile.
 */
export const fetchAddCardDetail = (
  variables: AddCardDetailVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<
    undefined,
    AddCardDetailError,
    AddCardDetailRequestBody,
    {},
    {},
    {}
  >({ url: "/card/add-card-detail", includeCredentials:true, method: "post", ...variables, signal });

/**
 * Adds a new card detail to the user's profile.
 */
export const useAddCardDetail = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AddCardDetailError,
      AddCardDetailVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useBankapiContext();
  return reactQuery.useMutation<
    undefined,
    AddCardDetailError,
    AddCardDetailVariables
  >({
    mutationFn: (variables: AddCardDetailVariables) =>
      fetchAddCardDetail(deepMerge(fetcherOptions, variables)),
    ...options,
  });
};

export type GetCardDetailsError = Fetcher.ErrorWrapper<undefined>;

export type GetCardDetailsVariables = BankapiContext["fetcherOptions"];

/**
 * Retrieve all card details associated with a user.
 */
export const fetchGetCardDetails = (
  variables: GetCardDetailsVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<undefined, GetCardDetailsError, undefined, {}, {}, {}>({
    url: "/card/all-card-details",
    method: "get",
    includeCredentials:true,
    ...variables,
    signal,
  });

/**
 * Retrieve all card details associated with a user.
 */
export const getCardDetailsQuery = (
  variables: GetCardDetailsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/card/all-card-details",
    operationId: "getCardDetails",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGetCardDetails(variables, signal),
});

/**
 * Retrieve all card details associated with a user.
 */
export const useSuspenseGetCardDetails = <TData = undefined,>(
  variables: GetCardDetailsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetCardDetailsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useSuspenseQuery<undefined, GetCardDetailsError, TData>({
    ...getCardDetailsQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

/**
 * Retrieve all card details associated with a user.
 */
export const useGetCardDetails = <TData = undefined,>(
  variables: GetCardDetailsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetCardDetailsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useQuery<undefined, GetCardDetailsError, TData>({
    ...getCardDetailsQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export type DeleteCardDetailError = Fetcher.ErrorWrapper<undefined>;

export type DeleteCardDetailRequestBody = {
  detailId?: string;
};

export type DeleteCardDetailVariables = {
  body?: DeleteCardDetailRequestBody;
} & BankapiContext["fetcherOptions"];

/**
 * Deletes a specific card detail for a user.
 */
export const fetchDeleteCardDetail = (
  variables: DeleteCardDetailVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<
    undefined,
    DeleteCardDetailError,
    DeleteCardDetailRequestBody,
    {},
    {},
    {}
  >({
    url: "/card/delete-card-detail",
    method: "delete",
    includeCredentials:true,
    ...variables,
    signal,
  });

/**
 * Deletes a specific card detail for a user.
 */
export const useDeleteCardDetail = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteCardDetailError,
      DeleteCardDetailVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useBankapiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteCardDetailError,
    DeleteCardDetailVariables
  >({
    mutationFn: (variables: DeleteCardDetailVariables) =>
      fetchDeleteCardDetail(deepMerge(fetcherOptions, variables)),
    ...options,
  });
};

export type UpdateCardDetailError = Fetcher.ErrorWrapper<undefined>;

export type UpdateCardDetailRequestBody = {
  detailId?: string;
  updateData: Record<string, any>;
};

export type UpdateCardDetailVariables = {
  body: UpdateCardDetailRequestBody;
} & BankapiContext["fetcherOptions"];

/**
 * Updates a specific card detail for a user.
 */
export const fetchUpdateCardDetail = (
  variables: UpdateCardDetailVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<
    undefined,
    UpdateCardDetailError,
    UpdateCardDetailRequestBody,
    {},
    {},
    {}
  >({ url: "/card/update-card-detail",  includeCredentials:true,method: "patch", ...variables, signal });

/**
 * Updates a specific card detail for a user.
 */
export const useUpdateCardDetail = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateCardDetailError,
      UpdateCardDetailVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useBankapiContext();
  return reactQuery.useMutation<
    undefined,
    UpdateCardDetailError,
    UpdateCardDetailVariables
  >({
    mutationFn: (variables: UpdateCardDetailVariables) =>
      fetchUpdateCardDetail({
        ...deepMerge(fetcherOptions, variables),
        body: variables.body, // Ensure body is explicitly included
      }),
    ...options,
  });
};

export type CreateDepositsError = Fetcher.ErrorWrapper<undefined>;

export type CreateDepositsRequestBody = {
  receiverAccount?: {
    accountName: string;
    accountBankName: string;
    accountNumber?: string;
    accountType?: string;
    accountBankRoutingTransitNumber?: string;
    accountBankSwiftCode?: string;
  }[];
  senderAccount?: string;
  amount?: number;
  transferType?: string;
  descriptionOfTransfer?: string;
  transferStatus?: string;
};

export type CreateDepositsVariables = {
  body?: CreateDepositsRequestBody;
} & BankapiContext["fetcherOptions"];

/**
 * Adds a new Deposit to the system.
 */
export const fetchCreateDeposits = (
  variables: CreateDepositsVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<
    undefined,
    CreateDepositsError,
    CreateDepositsRequestBody,
    {},
    {},
    {}
  >({ url: "/deposits/deposits",  includeCredentials:true,method: "post", ...variables, signal });

/**
 * Adds a new Deposit to the system.
 */
export const useCreateDeposits = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreateDepositsError,
      CreateDepositsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useBankapiContext();
  return reactQuery.useMutation<
    undefined,
    CreateDepositsError,
    CreateDepositsVariables
  >({
    mutationFn: (variables: CreateDepositsVariables) =>
      fetchCreateDeposits(deepMerge(fetcherOptions, variables)),
    ...options,
  });
};

export type GetDepositsError = Fetcher.ErrorWrapper<undefined>;

export type GetDepositsVariables = BankapiContext["fetcherOptions"];

/**
 * Returns a list of Deposits
 */
export const fetchGetDeposits = (
  variables: GetDepositsVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<undefined, GetDepositsError, undefined, {}, {}, {}>({
    url: "/deposits/deposits",
    method: "get",
    includeCredentials:true,
    ...variables,
    signal,
  });

/**
 * Returns a list of Deposits
 */
export const getDepositsQuery = (
  variables: GetDepositsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/deposits/deposits",
    operationId: "getDeposits",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGetDeposits(variables, signal),
});

/**
 * Returns a list of Deposits
 */
export const useSuspenseGetDeposits = <TData = undefined,>(
  variables: GetDepositsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetDepositsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useSuspenseQuery<undefined, GetDepositsError, TData>({
    ...getDepositsQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns a list of Deposits
 */
export const useGetDeposits = <TData = undefined,>(
  variables: GetDepositsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetDepositsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useQuery<undefined, GetDepositsError, TData>({
    ...getDepositsQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export type GetSingleDepositsInfoError = Fetcher.ErrorWrapper<undefined>;

export type GetSingleDepositsInfoVariables = BankapiContext["fetcherOptions"];

/**
 * Returns a single user transfer info
 */
export const fetchGetSingleDepositsInfo = (
  variables: GetSingleDepositsInfoVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<undefined, GetSingleDepositsInfoError, undefined, {}, {}, {}>({
    url: "/deposits/user-deposits-info",
    includeCredentials:true,
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns a single user transfer info
 */
export const getSingleDepositsInfoQuery = (
  variables: GetSingleDepositsInfoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/deposits/user-deposits-info",
    operationId: "getSingleDepositsInfo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGetSingleDepositsInfo(variables, signal),
});

/**
 * Returns a single user transfer info
 */
export const useSuspenseGetSingleDepositsInfo = <TData = undefined,>(
  variables: GetSingleDepositsInfoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetSingleDepositsInfoError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    GetSingleDepositsInfoError,
    TData
  >({
    ...getSingleDepositsInfoQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns a single user transfer info
 */
export const useGetSingleDepositsInfo = <TData = undefined,>(
  variables: GetSingleDepositsInfoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetSingleDepositsInfoError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useQuery<undefined, GetSingleDepositsInfoError, TData>({
    ...getSingleDepositsInfoQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export type CreateTransfersError = Fetcher.ErrorWrapper<undefined>;

export type CreateTransfersRequestBody = {
  receiverAccount?: string;
  senderAccount?: string;
  amount?: number;
  transferType?: string;
  descriptionOfTransfer?: string;
  transferStatus?: string;
};

export type CreateTransfersVariables = {
  body?: CreateTransfersRequestBody;
} & BankapiContext["fetcherOptions"];

/**
 * Adds a new transfer to the system.
 */
export const fetchCreateTransfers = (
  variables: CreateTransfersVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<
    undefined,
    CreateTransfersError,
    CreateTransfersRequestBody,
    {},
    {},
    {}
  >({ url: "/transfers/transfers", includeCredentials:true, method: "post", ...variables, signal });

/**
 * Adds a new transfer to the system.
 */
export const useCreateTransfers = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreateTransfersError,
      CreateTransfersVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useBankapiContext();
  return reactQuery.useMutation<
    undefined,
    CreateTransfersError,
    CreateTransfersVariables
  >({
    mutationFn: (variables: CreateTransfersVariables) =>
      fetchCreateTransfers(deepMerge(fetcherOptions, variables)),
    ...options,
  });
};

export type GetTransfersError = Fetcher.ErrorWrapper<undefined>;

export type GetTransfersVariables = BankapiContext["fetcherOptions"];

/**
 * Returns a list of transfers
 */
export const fetchGetTransfers = (
  variables: GetTransfersVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<undefined, GetTransfersError, undefined, {}, {}, {}>({
    url: "/transfers/transfers",
    method: "get",
    includeCredentials:true,
    ...variables,
    signal,
  });

/**
 * Returns a list of transfers
 */
export const getTransfersQuery = (
  variables: GetTransfersVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/transfers/transfers",
    operationId: "getTransfers",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGetTransfers(variables, signal),
});

/**
 * Returns a list of transfers
 */
export const useSuspenseGetTransfers = <TData = undefined,>(
  variables: GetTransfersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetTransfersError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useSuspenseQuery<undefined, GetTransfersError, TData>({
    ...getTransfersQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns a list of transfers
 */
export const useGetTransfers = <TData = undefined,>(
  variables: GetTransfersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetTransfersError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useQuery<undefined, GetTransfersError, TData>({
    ...getTransfersQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export type GetSingleTransfersInfoError = Fetcher.ErrorWrapper<undefined>;

export type GetSingleTransfersInfoVariables = BankapiContext["fetcherOptions"];

/**
 * Returns a single user transfer info
 */
export const fetchGetSingleTransfersInfo = (
  variables: GetSingleTransfersInfoVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<undefined, GetSingleTransfersInfoError, undefined, {}, {}, {}>({
    url: "/transfers/user-transfers-info",
    includeCredentials:true,
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns a single user transfer info
 */
export const getSingleTransfersInfoQuery = (
  variables: GetSingleTransfersInfoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/transfers/user-transfers-info",
    operationId: "getSingleTransfersInfo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGetSingleTransfersInfo(variables, signal),
});

/**
 * Returns a single user transfer info
 */
export const useSuspenseGetSingleTransfersInfo = <TData = undefined,>(
  variables: GetSingleTransfersInfoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetSingleTransfersInfoError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    GetSingleTransfersInfoError,
    TData
  >({
    ...getSingleTransfersInfoQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns a single user transfer info
 */
export const useGetSingleTransfersInfo = <TData = undefined,>(
  variables: GetSingleTransfersInfoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetSingleTransfersInfoError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useQuery<undefined, GetSingleTransfersInfoError, TData>({
    ...getSingleTransfersInfoQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export type RegisterUserError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: {
    /**
     * @example Validation failed. Missing fields or duplicate email.
     */
    message?: string;
  };
}>;

export type RegisterUserResponse = {
  /**
   * @example User successfully registered.
   */
  message?: string;
};

export type RegisterUserRequestBody = {
  phone: string;
  email: string;
  password: string;
  firstname: string;
  lastname: string;
};

export type RegisterUserVariables = {
  body: RegisterUserRequestBody;
} & BankapiContext["fetcherOptions"];

/**
 * Creates a new user with the provided details.
 */
export const fetchRegisterUser = (
  variables: RegisterUserVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<
    RegisterUserResponse,
    RegisterUserError,
    RegisterUserRequestBody,
    {},
    {},
    {}
  >({ url: "/user/signup",  includeCredentials:true,method: "post", ...variables, signal });

/**
 * Creates a new user with the provided details.
 */
export const useRegisterUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      RegisterUserResponse,
      RegisterUserError,
      RegisterUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useBankapiContext();
  return reactQuery.useMutation<
    RegisterUserResponse,
    RegisterUserError,
    RegisterUserVariables
  >({
    mutationFn: (variables: RegisterUserVariables) =>
      fetchRegisterUser({
        ...deepMerge(fetcherOptions, variables),
        body: variables.body, // Ensure body is explicitly included
      }),
    ...options,
  });
};

export type LoginUserError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: {
    /**
     * @example Incorrect credentials.
     */
    message?: string;
  };
}>;

export type LoginUserResponse = {
  /**
   * @example Successfully logged in
   */
  message?: string;
};

export type LoginUserRequestBody = {
  email: string;
  password: string;
};

export type LoginUserVariables = {
  body: LoginUserRequestBody;
} & BankapiContext["fetcherOptions"];

/**
 * Login a user into the system.
 */
export const fetchLoginUser = (
  variables: LoginUserVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<
    LoginUserResponse,
    LoginUserError,
    LoginUserRequestBody,
    {},
    {},
    {}
  >({ url: "/user/login", includeCredentials:true, method: "post", ...variables, signal });

/**
 * Login a user into the system.
 */
export const useLoginUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      LoginUserResponse,
      LoginUserError,
      LoginUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useBankapiContext();
  return reactQuery.useMutation<
    LoginUserResponse,
    LoginUserError,
    LoginUserVariables
  >({
    mutationFn: (variables: LoginUserVariables) =>
      fetchLoginUser({
        ...deepMerge(fetcherOptions, variables),
        body: variables.body, // Ensure body is explicitly included
      }),
    ...options,
  });
};

export type GetUserInformationError = Fetcher.ErrorWrapper<undefined>;

export type GetUserInformationVariables = BankapiContext["fetcherOptions"];

/**
 * Returns a single user's information
 */
export const fetchGetUserInformation = (
  variables: GetUserInformationVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<undefined, GetUserInformationError, undefined, {}, {}, {}>({
    url: "/user/user-info",
    includeCredentials:true,
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns a single user's information
 */
export const getUserInformationQuery = (
  variables: GetUserInformationVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/user-info",
    operationId: "getUserInformation",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGetUserInformation(variables, signal),
});

/**
 * Returns a single user's information
 */
export const useSuspenseGetUserInformation = <TData = undefined,>(
  variables: GetUserInformationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetUserInformationError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useSuspenseQuery<undefined, GetUserInformationError, TData>(
    {
      ...getUserInformationQuery(deepMerge(fetcherOptions, variables)),
      ...options,
      ...queryOptions,
    },
  );
};

/**
 * Returns a single user's information
 */
export const useGetUserInformation = <TData = undefined,>(
  variables: GetUserInformationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetUserInformationError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useQuery<undefined, GetUserInformationError, TData>({
    ...getUserInformationQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export type UpdateUserError = Fetcher.ErrorWrapper<undefined>;

export type UpdateUserRequestBody = {
  userId: string;
  updateFields: {
    [key: string]: any;
  };
};

export type UpdateUserVariables = {
  body: UpdateUserRequestBody;
} & BankapiContext["fetcherOptions"];

/**
 * Updates user data based on provided fields
 */
export const fetchUpdateUser = (
  variables: UpdateUserVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<undefined, UpdateUserError, UpdateUserRequestBody, {}, {}, {}>({
    url: "/user/user-info",
    includeCredentials:true,
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Updates user data based on provided fields
 */
export const useUpdateUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateUserError,
      UpdateUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useBankapiContext();
  return reactQuery.useMutation<
    undefined,
    UpdateUserError,
    UpdateUserVariables
  >({
    mutationFn: (variables: UpdateUserVariables) =>
      fetchUpdateUser({
        ...deepMerge(fetcherOptions, variables),
        body: variables.body, // Ensure body is explicitly included
      }),
    ...options,
  });
};

export type GetAllUsersError = Fetcher.ErrorWrapper<undefined>;

export type GetAllUsersVariables = BankapiContext["fetcherOptions"];

/**
 * Returns a list of all users
 */
export const fetchGetAllUsers = (
  variables: GetAllUsersVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<undefined, GetAllUsersError, undefined, {}, {}, {}>({
    url: "/user/users",
    includeCredentials:true,
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns a list of all users
 */
export const getAllUsersQuery = (
  variables: GetAllUsersVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/users",
    operationId: "getAllUsers",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGetAllUsers(variables, signal),
});

/**
 * Returns a list of all users
 */
export const useSuspenseGetAllUsers = <TData = undefined,>(
  variables: GetAllUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetAllUsersError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useSuspenseQuery<undefined, GetAllUsersError, TData>({
    ...getAllUsersQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns a list of all users
 */
export const useGetAllUsers = <TData = undefined,>(
  variables: GetAllUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetAllUsersError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBankapiContext(options);
  return reactQuery.useQuery<undefined, GetAllUsersError, TData>({
    ...getAllUsersQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export type LogOutError = Fetcher.ErrorWrapper<undefined>;

export type LogOutVariables = BankapiContext["fetcherOptions"];

/**
 * Logs out the user by clearing the session or token.
 */
export const fetchLogOut = (variables: LogOutVariables, signal?: AbortSignal) =>
  bankapiFetch<undefined, LogOutError, undefined, {}, {}, {}>({
    url: "/user/logout",
    includeCredentials:true,
    method: "post",
    ...variables,
    signal,
  });

/**
 * Logs out the user by clearing the session or token.
 */
export const useLogOut = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, LogOutError, LogOutVariables>,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useBankapiContext();
  return reactQuery.useMutation<undefined, LogOutError, LogOutVariables>({
    mutationFn: (variables: LogOutVariables) =>
      fetchLogOut(deepMerge(fetcherOptions, variables)),
    ...options,
  });
};

export type CreatePinError = Fetcher.ErrorWrapper<undefined>;

export type CreatePinRequestBody = {
  /**
   * @example 123456
   */
  pin: string;
};

export type CreatePinVariables = {
  body: CreatePinRequestBody;
} & BankapiContext["fetcherOptions"];

/**
 * Sets a new PIN for the user if not already set.
 */
export const fetchCreatePin = (
  variables: CreatePinVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<undefined, CreatePinError, CreatePinRequestBody, {}, {}, {}>({
    url: "/user/create-pin",
    includeCredentials:true,
    method: "post",
    ...variables,
    signal,
  });

/**
 * Sets a new PIN for the user if not already set.
 */
export const useCreatePin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreatePinError,
      CreatePinVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useBankapiContext();
  return reactQuery.useMutation<undefined, CreatePinError, CreatePinVariables>({
    mutationFn: (variables: CreatePinVariables) =>
      fetchCreatePin({
        ...deepMerge(fetcherOptions, variables),
        body: variables.body, // Ensure body is explicitly included
      }),
    ...options,
  });
};

export type ChangePinError = Fetcher.ErrorWrapper<undefined>;

export type ChangePinRequestBody = {
  /**
   * @example 123456
   */
  oldPin: string;
  /**
   * @example 654321
   */
  newPin: string;
  /**
   * @example 654321
   */
  confirmNewPin: string;
};

export type ChangePinVariables = {
  body: ChangePinRequestBody;
} & BankapiContext["fetcherOptions"];

/**
 * Changes an existing user's PIN.
 */
export const fetchChangePin = (
  variables: ChangePinVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<undefined, ChangePinError, ChangePinRequestBody, {}, {}, {}>({
    url: "/user/change-pin",
    includeCredentials:true,
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Changes an existing user's PIN.
 */
export const useChangePin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ChangePinError,
      ChangePinVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useBankapiContext();
  return reactQuery.useMutation<undefined, ChangePinError, ChangePinVariables>({
    mutationFn: (variables: ChangePinVariables) =>
      fetchChangePin({
        ...deepMerge(fetcherOptions, variables),
        body: variables.body, // Ensure body is explicitly included
      }),
    ...options,
  });
};

export type ChangePasswordError = Fetcher.ErrorWrapper<undefined>;

export type ChangePasswordRequestBody = {
  /**
   * @example oldPassword123
   */
  oldPassword: string;
  /**
   * @example newPassword456
   */
  newPassword: string;
  /**
   * @example newPassword456
   */
  confirmNewPassword: string;
};

export type ChangePasswordVariables = {
  body: ChangePasswordRequestBody;
} & BankapiContext["fetcherOptions"];

/**
 * Changes the user's password.
 */
export const fetchChangePassword = (
  variables: ChangePasswordVariables,
  signal?: AbortSignal,
) =>
  bankapiFetch<
    undefined,
    ChangePasswordError,
    ChangePasswordRequestBody,
    {},
    {},
    {}
  >({ url: "/user/change-password", includeCredentials:true, method: "patch", ...variables, signal });

/**
 * Changes the user's password.
 */
export const useChangePassword = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ChangePasswordError,
      ChangePasswordVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useBankapiContext();
  return reactQuery.useMutation<
    undefined,
    ChangePasswordError,
    ChangePasswordVariables
  >({
    mutationFn: (variables: ChangePasswordVariables) =>
      fetchChangePassword({
        ...deepMerge(fetcherOptions, variables),
        body: variables.body, // Ensure body is explicitly included
      }),
    ...options,
  });
};

export type QueryOperation =
  | {
      path: "/accounts/accounts";
      operationId: "getaccounts";
      variables: GetaccountsVariables;
    }
  | {
      path: "/accounts/account-info";
      operationId: "getSingleAccount";
      variables: GetSingleAccountVariables;
    }
  | {
      path: "/bank/all-bank-details";
      operationId: "getBankDetails";
      variables: GetBankDetailsVariables;
    }
  | {
      path: "/card/all-card-details";
      operationId: "getCardDetails";
      variables: GetCardDetailsVariables;
    }
  | {
      path: "/deposits/deposits";
      operationId: "getDeposits";
      variables: GetDepositsVariables;
    }
  | {
      path: "/deposits/user-deposits-info";
      operationId: "getSingleDepositsInfo";
      variables: GetSingleDepositsInfoVariables;
    }
  | {
      path: "/transfers/transfers";
      operationId: "getTransfers";
      variables: GetTransfersVariables;
    }
  | {
      path: "/transfers/user-transfers-info";
      operationId: "getSingleTransfersInfo";
      variables: GetSingleTransfersInfoVariables;
    }
  | {
      path: "/user/user-info";
      operationId: "getUserInformation";
      variables: GetUserInformationVariables;
    }
  | {
      path: "/user/users";
      operationId: "getAllUsers";
      variables: GetAllUsersVariables;
    };
