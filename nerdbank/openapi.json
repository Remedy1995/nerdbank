{
    "openapi": "3.0.0",
    "info": {
    "title": "Transfers API",
    "version": "1.0.0",
    "description": "API for managing transfers"
    },
    "servers": [
    {
    "url": "https://nerdbank.onrender.com/api"
    }
    ],
    "paths": {
    "/accounts/accounts": {
    "post": {
    "summary": "Create a new account",
    "description": "Adds a new account to the system.",
    "operationId": "Createaccounts",
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "accountName": {
    "type": "string"
    },
    "accountType": {
    "type": "string"
    },
    "accountPin": {
    "type": "string"
    },
    "accountBankName": {
    "type": "string"
    },
    "accountBankSwiftCode": {
    "type": "string"
    },
    "accountBankRoutingTransitNumber": {
    "type": "string"
    },
    "accountNumber": {
    "type": "string"
    },
    "accountBalance": {
    "type": "string"
    },
    "accountStatus": {
    "type": "string"
    }
    }
    }
    }
    }
    },
    "responses": {
    "201": {
    "description": "accounts created successfully"
    },
    "500": {
    "description": "Server error"
    }
    }
    },
    "get": {
    "summary": "Get all accounts",
    "description": "Returns a list of accounts",
    "operationId": "Getaccounts",
    "responses": {
    "200": {
    "description": "A JSON array of accounts"
    }
    }
    }
    },
    "/accounts/account-info": {
    "get": {
    "summary": "Get a specific account",
    "description": "Returns a specific account",
    "operationId": "GetSingleAccount",
    "responses": {
    "200": {
    "description": "A specific Account Information"
    }
    }
    },
    "patch": {
    "summary": "Update account information",
    "description": "Updates account data based on provided fields",
    "operationId": "UpdateAccount",
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "userId": {
    "type": "string",
    "description": "The ID of the user to update"
    },
    "updateFields": {
    "type": "object",
    "additionalProperties": true,
    "description": "Fields to update"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Account updated successfully"
    },
    "400": {
    "description": "Bad request, invalid input"
    },
    "404": {
    "description": "Account not found"
    },
    "500": {
    "description": "Internal server error"
    }
    }
    }
    },
    "/bank/add-bank-detail": {
    "post": {
    "summary": "Add new bank detail",
    "description": "Adds a new bank detail to the user's profile.",
    "operationId": "AddBankDetail",
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "typeOfBank": {
    "type": "string"
    },
    "bankCountry": {
    "type": "string"
    },
    "bankName": {
    "type": "string"
    },
    "accountName": {
    "type": "string"
    },
    "accountNumber": {
    "type": "string"
    },
    "swiftCode": {
    "type": "string"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Bank detail added successfully"
    },
    "500": {
    "description": "Server error"
    }
    }
    }
    },
    "/bank/all-bank-details": {
    "get": {
    "summary": "Get all bank details for a user",
    "description": "Retrieve all bank details associated with a user.",
    "operationId": "GetBankDetails",
    "requestBody": {
    "required": true
    },
    "responses": {
    "200": {
    "description": "Bank details fetched successfully"
    },
    "404": {
    "description": "No bank details found"
    }
    }
    }
    },
    "/bank/delete-bank-detail": {
    "delete": {
    "summary": "Delete a specific bank detail",
    "description": "Deletes a specific bank detail for a user.",
    "operationId": "DeleteBankDetail",
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "detailId": {
    "type": "string"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Bank detail deleted successfully"
    },
    "404": {
    "description": "Bank detail not found"
    }
    }
    }
    },
    "/bank/update-bank-detail": {
    "patch": {
    "summary": "Update a specific bank detail",
    "description": "Updates a specific bank detail for a user.",
    "operationId": "UpdateBankDetail",
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "required": [
    "userId",
    "updateData"
    ],
    "properties": {
    "detailId": {
    "type": "string"
    },
    "updateData": {
    "type": "object"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Bank detail updated successfully"
    },
    "404": {
    "description": "Bank detail not found"
    }
    }
    }
    },
    "/card/add-card-detail": {
    "post": {
    "summary": "Add a new card detail",
    "description": "Adds a new card detail to the user's profile.",
    "operationId": "AddCardDetail",
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "card": {
    "type": "string"
    },
    "cardType": {
    "type": "string"
    },
    "cardNumber": {
    "type": "string"
    },
    "expiryDate": {
    "type": "string"
    },
    "cvv": {
    "type": "string"
    },
    "cardHolderName": {
    "type": "string"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Card detail added successfully"
    },
    "500": {
    "description": "Server error"
    }
    }
    }
    },
    "/card/all-card-details": {
    "get": {
    "summary": "Get all card details for a user",
    "description": "Retrieve all card details associated with a user.",
    "operationId": "GetCardDetails",
    "responses": {
    "200": {
    "description": "Card details fetched successfully"
    },
    "404": {
    "description": "No card details found"
    }
    }
    }
    },
    "/card/delete-card-detail": {
    "delete": {
    "summary": "Delete a specific card detail",
    "description": "Deletes a specific card detail for a user.",
    "operationId": "DeleteCardDetail",
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "detailId": {
    "type": "string"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Card detail deleted successfully"
    },
    "404": {
    "description": "Card detail not found"
    }
    }
    }
    },
    "/card/update-card-detail": {
    "patch": {
    "summary": "Update a specific card detail",
    "description": "Updates a specific card detail for a user.",
    "operationId": "UpdateCardDetail",
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "required": [
    "userId",
    "updateData"
    ],
    "properties": {
    "detailId": {
    "type": "string"
    },
    "updateData": {
    "type": "object"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Card detail updated successfully"
    },
    "404": {
    "description": "Card detail not found"
    }
    }
    }
    },
    "/deposits/deposits": {
    "post": {
    "summary": "Create a new Deposit",
    "description": "Adds a new Deposit to the system.",
    "operationId": "CreateDeposits",
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "receiverAccount": {
    "type": "array",
    "items": {
    "type": "object",
    "properties": {
    "accountName": {
    "type": "string"
    },
    "accountBankName": {
    "type": "string"
    },
    "accountNumber": {
    "type": "string"
    },
    "accountType": {
    "type": "string"
    },
    "accountBankRoutingTransitNumber": {
    "type": "string"
    },
    "accountBankSwiftCode": {
    "type": "string"
    }
    },
    "required": [
    "accountName",
    "accountBankName"
    ]
    }
    },
    "senderAccount": {
    "type": "string"
    },
    "amount": {
    "type": "number"
    },
    "transferType": {
    "type": "string"
    },
    "descriptionOfTransfer": {
    "type": "string"
    },
    "transferStatus": {
    "type": "string"
    }
    }
    }
    }
    }
    },
    "responses": {
    "201": {
    "description": "Deposit created successfully"
    },
    "500": {
    "description": "Server error"
    }
    }
    },
    "get": {
    "summary": "Get all Deposits",
    "description": "Returns a list of Deposits",
    "operationId": "GetDeposits",
    "responses": {
    "200": {
    "description": "A JSON array of Deposits"
    }
    }
    }
    },
    "/deposits/user-deposits-info": {
    "get": {
    "summary": "Get single Deposits data",
    "description": "Returns a single user transfer info",
    "operationId": "GetSingleDepositsInfo",
    "responses": {
    "200": {
    "description": "A JSON array of Deposits"
    }
    }
    }
    },
    "/transfers/transfers": {
    "post": {
    "summary": "Create a new transfer",
    "description": "Adds a new transfer to the system.",
    "operationId": "CreateTransfers",
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "receiverAccount": {
    "type": "string"
    },
    "senderAccount": {
    "type": "string"
    },
    "amount": {
    "type": "number"
    },
    "transferType": {
    "type": "string"
    },
    "descriptionOfTransfer": {
    "type": "string"
    },
    "transferStatus": {
    "type": "string"
    }
    }
    }
    }
    }
    },
    "responses": {
    "201": {
    "description": "Transfer created successfully"
    },
    "500": {
    "description": "Server error"
    }
    }
    },
    "get": {
    "summary": "Get all transfers",
    "description": "Returns a list of transfers",
    "operationId": "GetTransfers",
    "responses": {
    "200": {
    "description": "A JSON array of transfers"
    }
    }
    }
    },
    "/transfers/user-transfers-info": {
    "get": {
    "summary": "Get single transfers data",
    "description": "Returns a single user transfer info",
    "operationId": "GetSingleTransfersInfo",
    "responses": {
    "200": {
    "description": "A JSON array of transfers"
    }
    }
    }
    },
    "/user/signup": {
    "post": {
    "summary": "Register a new user",
    "description": "Creates a new user with the provided details.",
    "operationId": "RegisterUser",
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "required": [
    "phone",
    "email",
    "password",
    "firstname",
    "lastname"
    ],
    "properties": {
    "phone": {
    "type": "string"
    },
    "email": {
    "type": "string"
    },
    "password": {
    "type": "string"
    },
    "firstname": {
    "type": "string"
    },
    "lastname": {
    "type": "string"
    }
    }
    }
    }
    }
    },
    "responses": {
    "201": {
    "description": "Successfully registered",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "message": {
    "type": "string",
    "example": "User successfully registered."
    }
    }
    }
    }
    }
    },
    "422": {
    "description": "Missing required fields or duplicate email",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "message": {
    "type": "string",
    "example": "Validation failed. Missing fields or duplicate email."
    }
    }
    }
    }
    }
    },
    "500": {
    "description": "Server error occurred"
    }
    }
    }
    },
    "/user/login": {
    "post": {
    "summary": "Login a user",
    "description": "Login a user into the system.",
    "operationId": "LoginUser",
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "required": [
    "email",
    "password"
    ],
    "properties": {
    "email": {
    "type": "string"
    },
    "password": {
    "type": "string"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Successfully logged in",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "message": {
    "type": "string",
    "example": "Successfully logged in"
    }
    }
    }
    }
    }
    },
    "400": {
    "description": "Incorrect credentials entered",
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "properties": {
    "message": {
    "type": "string",
    "example": "Incorrect credentials."
    }
    }
    }
    }
    }
    },
    "500": {
    "description": "Server error occurred"
    }
    }
    }
    },
    "/user/user-info": {
    "get": {
    "summary": "Get a single user's information",
    "description": "Returns a single user's information",
    "operationId": "GetUserInformation",
    "responses": {
    "200": {
    "description": "User info retrieved successfully"
    },
    "401": {
    "description": "Unauthorized"
    },
    "500": {
    "description": "Server error occurred"
    }
    }
    },
    "patch": {
    "summary": "Update user information",
    "description": "Updates user data based on provided fields",
    "operationId": "UpdateUser",
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "required": [
    "userId",
    "updateFields"
    ],
    "properties": {
    "userId": {
    "type": "string"
    },
    "updateFields": {
    "type": "object",
    "additionalProperties": true
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "User updated successfully"
    },
    "400": {
    "description": "Invalid input"
    },
    "404": {
    "description": "User not found"
    },
    "500": {
    "description": "Server error occurred"
    }
    }
    }
    },
    "/user/users": {
    "get": {
    "summary": "Get a list of users",
    "description": "Returns a list of all users",
    "operationId": "GetAllUsers",
    "responses": {
    "200": {
    "description": "List of users"
    },
    "401": {
    "description": "Unauthorized"
    },
    "403": {
    "description": "Forbidden - Admins only"
    },
    "500": {
    "description": "Server error occurred"
    }
    }
    }
    },
    "/user/logout": {
    "post": {
    "summary": "Logout a user",
    "description": "Logs out the user by clearing the session or token.",
    "operationId": "LogOut",
    "responses": {
    "200": {
    "description": "User logged out successfully"
    },
    "500": {
    "description": "Server error occurred"
    }
    }
    }
    },
    "/user/create-pin": {
    "post": {
    "summary": "Set a new user PIN",
    "description": "Sets a new PIN for the user if not already set.",
    "operationId": "CreatePin",
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "required": [
    "pin"
    ],
    "properties": {
    "pin": {
    "type": "string",
    "example": "123456"
    }
    }
    }
    }
    }
    },
    "responses": {
    "201": {
    "description": "PIN set successfully."
    },
    "400": {
    "description": "Invalid PIN input or PIN already set."
    },
    "404": {
    "description": "User not found."
    },
    "422": {
    "description": "PIN is required or PIN length should be 6 digits."
    },
    "500": {
    "description": "Server error occurred."
    }
    }
    }
    },
    "/user/change-pin": {
    "patch": {
    "summary": "Change user PIN",
    "description": "Changes an existing user's PIN.",
    "operationId": "ChangePin",
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "required": [
    "oldPin",
    "newPin",
    "confirmNewPin"
    ],
    "properties": {
    "oldPin": {
    "type": "string",
    "example": "123456"
    },
    "newPin": {
    "type": "string",
    "example": "654321"
    },
    "confirmNewPin": {
    "type": "string",
    "example": "654321"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "PIN updated successfully."
    },
    "400": {
    "description": "Invalid input or PIN mismatch."
    },
    "401": {
    "description": "Incorrect old PIN."
    },
    "404": {
    "description": "User not found."
    },
    "500": {
    "description": "Server error occurred."
    }
    }
    }
    },
    "/user/change-password": {
    "patch": {
    "summary": "Change user password",
    "description": "Changes the user's password.",
    "operationId": "ChangePassword",
    "requestBody": {
    "required": true,
    "content": {
    "application/json": {
    "schema": {
    "type": "object",
    "required": [
    "oldPassword",
    "newPassword",
    "confirmNewPassword"
    ],
    "properties": {
    "oldPassword": {
    "type": "string",
    "example": "oldPassword123"
    },
    "newPassword": {
    "type": "string",
    "example": "newPassword456"
    },
    "confirmNewPassword": {
    "type": "string",
    "example": "newPassword456"
    }
    }
    }
    }
    }
    },
    "responses": {
    "200": {
    "description": "Password updated successfully."
    },
    "400": {
    "description": "Invalid input or passwords do not match."
    },
    "401": {
    "description": "Incorrect old password."
    },
    "404": {
    "description": "User not found."
    },
    "500": {
    "description": "Server error occurred."
    }
    }
    }
    }
    },
    "components": {},
    "tags": []
    }